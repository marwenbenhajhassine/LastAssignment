version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  producer1:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python producer_consumer/producer.py
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq

  producer2:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python producer_consumer/producer.py
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq

  consumer1:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python producer_consumer/consumer.py
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq

  consumer2:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python producer_consumer/consumer.py
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq

  publisher:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python pub_sub/publisher.py
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq

  subscriber:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python pub_sub/subscriber.py
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq
      SUBSCRIBER_NAME: "subscriber-1"

  request_service:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python request_reply/request_service.py
    ports:
      - "8082:8080"
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq

  reply_service:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile.python
    command: python request_reply/reply_service.py
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq

  # Backend services
  backend1:
    build: ./backend
    environment:
      - BACKEND_ID=Backend-1
    depends_on:
      - rabbitmq
      - primary_db

  backend2:
    build: ./backend
    environment:
      - BACKEND_ID=Backend-2
    depends_on:
      - rabbitmq
      - primary_db

  backend3:
    build: ./backend
    environment:
      - BACKEND_ID=Backend-3
    depends_on:
      - rabbitmq
      - primary_db

  # Database service with replication
  # Primary (Master) Database Service
  primary_db:
    build: ./database  # Use the custom Dockerfile in the 'database' folder
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tododb
      MYSQL_USER: todo_user
      MYSQL_PASSWORD: todo_password
      MYSQL_REPLICATION_USER: repl_user  # Replication user
      MYSQL_REPLICATION_PASSWORD: repl_password
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

    ports:
      - "3306:3306"
    command: >
      --server-id=1
      --log-bin=mysql-bin
      --gtid-mode=ON
      --enforce-gtid-consistency=true
      --log-slave-updates=true
      --read-only=0

  # Replica 1 Database Service
  replica1_db:
    build: ./database  # Use the custom Dockerfile in the 'database' folder
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tododb
      MYSQL_USER: todo_user
      MYSQL_PASSWORD: todo_password
      MYSQL_REPLICATION_USER: repl_user
      MYSQL_REPLICATION_PASSWORD: repl_password
    depends_on:
      - primary_db
    ports:
      - "3307:3306"
    command: >
      --server-id=2
      --log-bin=mysql-bin
      --gtid-mode=ON
      --enforce-gtid-consistency=true
      --log-slave-updates=true
      --read-only=1

  # Replica 2 Database Service
  replica2_db:
    build: ./database  # Use the custom Dockerfile in the 'database' folder
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tododb
      MYSQL_USER: todo_user
      MYSQL_PASSWORD: todo_password
      MYSQL_REPLICATION_USER: repl_user
      MYSQL_REPLICATION_PASSWORD: repl_password
    depends_on:
      - primary_db
    ports:
      - "3308:3306"
    command: >
      --server-id=3
      --log-bin=mysql-bin
      --gtid-mode=ON
      --enforce-gtid-consistency=true
      --log-slave-updates=true
      --read-only=1
  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/public:/usr/share/nginx/html  # Serve static frontend files
    depends_on:
      - backend1
      - backend2
      - backend3
